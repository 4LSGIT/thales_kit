Operators
============
Operators are used to perform operations on variables and values.

* :ref:`Arithmetic operators`

* :ref:`Assignment operators`

* :ref:`Comparison operators`

* :ref:`Logical operators`

* :ref:`Identity operators`

* :ref:`Membership operators`

* :ref:`Bitwise operators`

Arithmetic operators
----------------------
Arithmetic operators are used with numeric values to perform common mathematical operations:

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Operator
        - Name
    *   - `+`
        - Addition
    *   - `-`
        - Subtraction
    *   - `*`
        - Multiplication
    *   - `/`
        - Division
    *   - `%`
        - Modulus
    *   - `**`
        - Exponentiation
    *   - `//`
        - Floor division

**Example**

.. code-block:: python

    x = 5
    y = 3

    a = x + y
    b = x - y
    c = x * y
    d = x / y
    e = x % y
    f = x ** y
    g = x // y

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
    print(f)
    print(g)

>>> %Run -c $EDITOR_CONTENT
8
2
15
1.666667
2
125
1
8
2
15
>>> 

Assignment operators
---------------------

Assignment operators are used to assign values to variables.

.. list-table:: 
    :widths: 10 30 30
    :header-rows: 1

    *   - Operator
        - Example
        - Same As
    *   - `=`
        - a = 6
        - a =6
    *   - `+=`
        - a += 6
        - a = a + 6
    *   - `-=`
        - a -= 6
        - a = a - 6
    *   - `*=`
        - a `*=` 6
        - a = a * 6
    *   - `/=`
        - a /= 6
        - a = a / 6
    *   - `%=`
        - a %= 6
        - a = a % 6
    *   - `**=`
        - a `**=` 6
        - a = a ** 6
    *   - `//=`
        - a //= 6
        - a = a // 6
    *   - `&=`
        - a &= 6
        - a = a & 6
    *   - `|=`
        - a `|=` 6
        - a = a | 6
    *   - `^=`
        - a ^= 6
        - a = a ^ 6
    *   - `>>=`
        - a >>= 6
        - a = a >> 6
    *   - `<<=`
        - a <<= 6
        - a = a << 6

**Example**

.. code-block:: python

    a = 6

    a *= 6
    print(a)

>>> %Run test.py
36
>>> 

Comparison operators
------------------------
Comparison operators are used to compare two values:

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - ==
        - Equal
    *   - !=
        - Not equal
    *   - <
        - Less than
    *   - >
        - Greater than
    *   - >=
        - Greater than or equal to
    *   - <=
        - Less than or equal to


**Example**

.. code-block:: python

    a = 6
    b = 8

    print(a>b)

>>> %Run test.py
False
>>> 
Return **False**, beause the **a** is less than the **b**.

Logical operators
-----------------------

Logical operators are used to combine conditional statements:

Operator	Description	Example	Try it
and 	Returns True if both statements are true	x < 5 and  x < 10	
or	Returns True if one of the statements is true	x < 5 or x < 4	
not	Reverse the result, returns False if the result is true


Identity operators
------------------------
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:
Operator	Description	Example	Try it
is 	Returns True if both variables are the same object	x is y	
is not	Returns True if both variables are not the same object	x is not y

Membership operators
----------------------
Membership operators are used to test if a sequence is presented in an object:
Operator	Description	Example	Try it
in 	Returns True if a sequence with the specified value is present in the object	x in y	
not in	Returns True if a sequence with the specified value is not present in the object	x not in y

Bitwise operators
------------------------

Bitwise operators are used to compare (binary) numbers:

Operator	Name	Description
& 	AND	Sets each bit to 1 if both bits are 1
|	OR	Sets each bit to 1 if one of two bits is 1
 ^	XOR	Sets each bit to 1 if only one of two bits is 1
~ 	NOT	Inverts all the bits
<<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off