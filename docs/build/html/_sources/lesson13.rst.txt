Colorful Light
==============================================

如我们所知，光是可以叠加的。比如蓝色光加绿色光将会产生青色光，红色光加绿色光将会产生黄色光。
这被称之为The additive method of color mixing. 

* `Additive color - Wikipedia <https://en.wikipedia.org/wiki/Additive_color>`_

基于这个原理，我们可以利用三原色光按不同的比重混合出任意的颜色的可见光，如橙色可由较多的红色加上较少的绿色产生。

这个章节，我们将用RGB LED来探索加色混合的奥秘！

RGB LED相当于将Red LED, Green LED, Blue LED封装在一个灯帽下，让三个LED共用一个阴极引脚。
为每一个阳极引脚提供电信号，都能显示出对应颜色的光。通过配置每个阳极引脚的电信号强度，便能让它产生各种颜色。

Wiring
-----------------------------------------------

将RGB LED平放在桌子上，我们能看到它有4根长短不一的leads。
找到最长的一根(GND)，将它侧向左边。
现在，四根leads的顺序从左到右依次是Red, GND, Green, Blue。

.. image:: img/pic1.png

1. 将Red lead经由330Ω电阻连接至GP13引脚。使用相同强度供电时，Red LED会较之另外两者亮一些，需要用稍大一些的电阻降低其亮度。
#. 将Green lead经由220Ω电阻连接至GP14引脚。
#. 将Blue lead经由220Ω电阻连接至GP15引脚。
#. 将GND lead连接至负极电源总线。
#. 将负极电源总线连接至Pico的GND。



Code
-----------------------------------------------

在这里，我们可以在电脑上的画图软件（如 paint）选取自己喜欢的颜色，将其用RGB LED显示出来。

.. code-block:: python

    import machine
    import utime

    red = machine.PWM(machine.Pin(13))
    green = machine.PWM(machine.Pin(14))
    blue = machine.PWM(machine.Pin(15))
    red.freq(1000)
    green.freq(1000)
    blue.freq(1000)

    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def color_to_duty(rgb_value):
        rgb_value = interval_mapping(rgb_value,0,255,0,65535)
        return rgb_value

    def colorSet(red,blue,green):
        red.duty_u16(color_to_duty(red))
        green.duty_u16(color_to_duty(green))
        blue.duty_u16(color_to_duty(blue))

    colorSet(255,128,0)

选好颜色后，将RGB值写入colorSet()中，你将能看到RGB亮出你先要的颜色

.. image:: img/pic1.png


How it works?
--------------------

我们定义了一个 ```colorSet()``` 函数让三原色光一同工作。

目前, 在电脑硬件中的像素通常采取24bit表示的方法，三种原色光各分到8位元，每一种原色的强度依照8位元的最高值2的8次方，也就是256个值。
用这种方法可以组合16777216种颜色。
colorSet函数也遵循了24bit表示法，这样能让我们更容易选出想要的颜色。

而又因为led通过PWM输出时duty_u16值范围为0~65535（而非0~255），为了与RGB值相对应，我们定义了 ```color_to_duty()``` 和 ```interval_mapping()``` 函数，让RGB值映射成duty值。

